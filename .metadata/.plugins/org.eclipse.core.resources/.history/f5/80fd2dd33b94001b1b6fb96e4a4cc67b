package programmers;

import java.util.*;

class Solution {
	
	class Node {
		int idx;   // 노드 위치
		int distance; // 손님
		
		public Node(int idx, int distance) {
			this.idx = idx;
			this.distance = distance;
		}
		
	}
	
	public static void dijkstra(int start) {
		d[start][start] = 1; // 0부터 시작
		for(int j=0; j<map.get(start).size(); j++) {
			d[map.get(start).get(j).getIdx()] = map.get(start).get(j).getDistance();
		}
		
		// 시작 노드를 제외한 n - 1 개의 노드에 대해 반복
		for(int i=0; i<n-1; i++) {
			int now = getSmallestNode();
			checked[now] = true;
			
			for(int j=0; j<map.get(now).size(); j++) {
				int cost = d[now] + map.get(now).get(j).getDistance();
				
				if(cost < d[map.get(now).get(j).getIdx()]) {
					d[map.get(now).get(j).getIdx()] = cost;
				}
			}
		}
	}
	
	public static ArrayList<ArrayList<Node>> map = new ArrayList<>(); // 각 노드의 정보를 담을 수 있는 배열 
	static int[][] d = new int[100001][100001];
	
	public int[] solution(int n, int[] passenger, int[][] train) {
		
		
		
		int[] answer = {};
		return answer;
	}

	public static void main(String[] args) {
		int[] passanger = { 1,1,1,1,1,1 };
		int n = 6;
		int[][] train = {{1,2},{1,3},{1,4},{3,5},{3,6}};

		Solution s = new Solution();
		int[] answer = s.solution(n, passanger, train);
		System.out.println(Arrays.toString(answer));
	}
}