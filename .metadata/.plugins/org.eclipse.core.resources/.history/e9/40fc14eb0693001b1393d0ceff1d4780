package programmers;

import java.util.*;

public class Kakao2021_06 {
	int[][] Board;
	static final int INF = (int) 1e9;

	class Point {
		Point(int r, int c, int t) {
			row = r;
			col = c;
			cnt = t;
		}

		int row, col, cnt;
	}

	int permutate(Point src) {
		int ret = INF;
		for (int num = 1; num <= 6; ++num) {
			List<Point> list = new ArrayList<>();
			for (int i = 0; i < 4; i++) {
				for (int j = 0; j < 4; j++) {
					if (Board[i][j] == num) {
						list.add(new Point(i, j, 0));
					}
				}
			}
			if (list.isEmpty()) continue;

			int one = bfs(src, list.get(0)) + bfs(list.get(0), list.get(1)) + 2;
			int two = bfs(src, list.get(1)) + bfs(list.get(0), list.get(0)) + 2;

			for (int i = 0; i < 2; i++) {
				Board[list.get(i).row][list.get(i).col] = 0;
				
			}
			ret = Math.min(ret, one + permutate(list.get(1)));
			ret = Math.min(ret, two + permutate(list.get(0)));
			
			for (int i = 0; i < 2; i++) {
				Board[list.get(i).row][list.get(i).col] = num;
			}
		}

		return ret;
	}

	public int solution(int[][] board, int r, int c) {
		Board = board;
		return permutate(new Point(r, c, 0));
	}

	public static void main(String[] args) {
		int[][] board = { { 1, 0, 0, 3 }, { 2, 0, 0, 0 }, { 0, 0, 0, 2 }, { 3, 0, 1, 0 } };

		int r = 1;
		int c = 0;

		Kakao2021_06 k = new Kakao2021_06();
		int answer = k.solution(board, r, c);
		System.out.println(answer);
	}
}
