package programmers;

import java.util.*;

public class Kakao2020_05 {
	
	public static int[][] solution(int n, int[][] build_frame) {
		ArrayList<Frame> list = new ArrayList<>();
		
		for(int i=0; i<build_frame.length; i++) {
			int x = build_frame[i][0];
			int y = build_frame[i][1];
			int a = build_frame[i][2];
			int b = build_frame[i][3];
			
			if(b == 0) {
				list.remove(new Frame(x, y, a));
			} else {
				if(a == 0) {
					if(isMakeColumn(list, x, y)) {
						list.add(new Frame(x, y, a));
					}
				} else {
					if(isMakeBeam(list, x, y)) {
						list.add(new Frame(x, y, a));
					}
				}
			}
		}
		
		int[][] result = new int[list.size()][3];
		
		for(int i=0; i<result.length; i++) {
			Frame frame = list.get(i);
			result[i][0] = frame.x;
			result[i][1] = frame.y;
			result[i][2] = frame.type;
		}
		
		Arrays.sort(result, (o1, o2) -> {
			if(o1[0] == o2[0]) {
				if(o1[1] == o2[1]) {
					return o1[2] - o2[2];
				} else {
					return o1[1] - o2[1];
				}
			} else {
				return o1[0] - o2[0];
			}
		});
	}
	
	public boolean isMakeBeam(ArrayList<Frame> list, int x, int y) {
		if(list.contains(new Frame(x, y-1, 0)) || list.contains(new Frame(x+1, y-1, 0))
				|| (list.contains(new Frame(x-1, y, 1)) && list.contains(x+1, y, 1)))) {
			
		}
	}
}

class Frame {
	int x;
	int y;
	int type;
	
	Frame(int x, int y, int type) {
		this.x = x;
		this.y = y;
		this.type = type;
	}
	
	@Override
	public boolean equals(Object object) {
		if(object == null) {
			return false;
		}
		if(getClass() != object.getClass()) {
			return false;
		}
		Frame frame = (Frame)object;
		
		if(x == frame.x && y == frame.y && type == frame.type) {
			return true;
		} else {
			return false;
		}
	}
}
